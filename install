#!/usr/bin/env python

import os
import subprocess


BASE_PATH = os.path.dirname(os.path.realpath(__file__))
DOTFILES_PATH = os.path.join(BASE_PATH, 'dotfiles')
HOME = os.path.expanduser('~')


# TODO: Rename originals if they aren't
# links to our project
def create_links():
    for file in os.listdir(DOTFILES_PATH):
        path = os.path.join(DOTFILES_PATH, file)
        relpath = os.path.relpath(path, HOME)
        if os.path.isfile(path):
            dst = os.path.join(HOME, ".{}".format(file))
            # If the file exists remove it
            # NOTE: This will cause data loss, we can read links and rename to
            # .old later if I feel like.
            if os.path.isfile(dst):
                os.unlink(dst)
            try:
                os.symlink(relpath, dst)
            except OSError:
                pass


def install_nvim():
    nvim_config_path = os.path.join(HOME, '.config/nvim')
    autoload_path = os.path.join(nvim_config_path, 'autoload')
    plug_path = os.path.join(autoload_path, 'plug.vim')

    try:
        os.makedirs(autoload_path)
    except OSError:
        pass

    try:
        os.symlink(
            os.path.relpath(
                os.path.join(BASE_PATH, 'neovim/nvimrc'),
                nvim_config_path
            ),
            os.path.join(nvim_config_path, 'init.vim')
        )
    except OSError:
        pass

    if not os.path.exists(plug_path):
        subprocess.call([
            "curl",
            "-fLo",
            plug_path,
            "https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim",
        ])
        print("Now run 'nvim +PlugInstall'")


def main():
    create_links()
    install_nvim()


if __name__ == '__main__':
    main()
