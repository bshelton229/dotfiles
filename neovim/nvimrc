" Plug
" https://github.com/junegunn/vim-plug
call plug#begin('~/.config/nvim/plugged')

Plug 'rking/ag.vim'
Plug 'scrooloose/nerdtree', { 'on': 'NERDTreeToggle' }
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-surround'
Plug 'ntpeters/vim-better-whitespace'
Plug 'airblade/vim-gitgutter'
Plug 'easymotion/vim-easymotion'
Plug 'MarcWeber/vim-addon-mw-utils'
Plug 'tomtom/tlib_vim'
Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'
Plug 'tpope/vim-rails'
Plug 'wting/rust.vim'
Plug 'Raimondi/delimitMate'
Plug 'digitaltoad/vim-jade'
Plug 'vim-scripts/nginx.vim'
Plug 'ekalinin/Dockerfile.vim'
Plug 'editorconfig/editorconfig-vim'
Plug 'Yggdroot/indentLine'
Plug 'benekastah/neomake'
Plug 'majutsushi/tagbar'
Plug 'morhetz/gruvbox'
Plug 'fatih/vim-go', { 'for': 'go' }
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'smerrill/vcl-vim-plugin'
Plug 'mattn/emmet-vim', { 'for': 'html' }
Plug 'ap/vim-buftabline'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-unimpaired'
Plug 'Shougo/deoplete.nvim'
Plug 'elixir-lang/vim-elixir'
Plug 'mustache/vim-mustache-handlebars'
Plug 'slim-template/vim-slim'
Plug 'cespare/vim-toml'
Plug 'christoomey/vim-tmux-navigator'
Plug 'python-rope/ropevim'
Plug 'janko-m/vim-test'

" Language plugins
Plug 'vim-scripts/indentpython.vim'
Plug 'pangloss/vim-javascript'
Plug 'kchmck/vim-coffee-script'

" Themes
Plug 'chriskempson/base16-vim'
Plug 'altercation/vim-colors-solarized'
Plug 'nanotech/jellybeans.vim'
Plug 'owickstrom/vim-colors-paramount'
Plug 'gosukiwi/vim-atom-dark'

call plug#end()

" Color scheme settings
set termguicolors
colorscheme gruvbox
set background=dark
let g:solarized_termcolors=256

"The comma leader
let mapleader=","

filetype plugin indent on
syntax on

" Tab settings
set expandtab
set ts=4
set sts=4
set sw=4

" Searching
set hlsearch
set ignorecase " case insensitive searching
set smartcase " case-sensitive if expresson contains a capital letter

set showcmd
set number
set backspace=2

" Flymode
let g:AutoPairsFlyMode = 1

" Undo
set undodir=~/.nvim/undodir
set undofile
set undolevels=1000
set undoreload=10000

" Key maps
nnoremap K i<CR><Esc>
noremap <space> :let @/=''<CR>
nnoremap <leader>/ "fyiw :/<c-r>f<cr>
map <C-n> :NERDTreeToggle<CR>
map <C-p> :FZF<CR>
map <leader>w <C-w>w
map <leader>so :so ~/.config/nvim/init.vim<cr>
map <leader>df :e! ~/.dotfiles<cr>
map <leader>f :FZF<cr>
map <leader>sp :sp<cr>
map <leader>vs :vs<cr>
map <leader>q :q<cr>
map <leader>w :w<cr>
nmap <leader>= :bnext<CR>
nmap <leader>- :bprevious<CR>
nmap <leader>bq :bp <BAR> bd #<CR>
nnoremap <C-h> <C-W>h
if has('nvim')
    " Crazy neovim hack dealing with ctrl-h being backspace
    " https://github.com/neovim/neovim/issues/2048
    nmap <BS> <C-W>h
endif
nnoremap <C-j> <C-W>j
nnoremap <C-k> <C-W>k
nnoremap <C-l> <C-W>l

" bind K to grep word under cursor
" Gets in the way of my split thing
" nnoremap K :Ag! "<C-R><C-W>"<CR>

" Buffergator
let g:buffergator_viewport_split_policy="T"

" Some mouse settings
set ttyfast
set mouse=a

let g:indentLine_char = '¦'
let g:indent_guides_enable_on_vim_startup=1
let g:indentLine_enabled = 0
let g:indent_guides_auto_colors = 1
let g:indentLine_leadingSpaceEnabled = 0
let g:indentLine_leadingSpaceChar = '·'

" NERDTree config
let NERDTreeIgnore = ['\.pyc$', '\.pyo$']
let NERDTreeShowHidden=0
let NERDTreeMouseMode=2

" Some kay maps
nnoremap <CR> o<Esc>
nnoremap <leader>j i<CR><Esc>==

"" Neomake
" run make on each save
autocmd! BufWritePost * Neomake

" Delimate settings
let delimitMate_expand_cr=1

" Airline config
let g:airline_left_sep=''
let g:airline_right_sep=''
let g:airline_theme='distinguished'

" Buffertabline config
let g:buftabline_show=1
let g:buftabline_numbers=1

" Better highlight color
hi Search guibg=LightBlue ctermbg=blue

" File types
if has('autocmd') && !exists('autocommands_loaded')
    let autocommands_loaded = 1
    autocmd FileType go setlocal ts=8 sts=8 sw=8 noexpandtab
    autocmd FileType yaml setlocal ts=2 sts=2 sw=2 expandtab
    autocmd FileType ruby setlocal ts=2 sts=2 sw=2 expandtab

    autocmd BufNewFile,BufRead *.sls setlocal ft=yaml
endif

" code folding settings
set foldmethod=syntax " fold based on indent
set foldnestmax=10 " deepest fold is 10 levels
set nofoldenable " don't fold by default
set foldlevel=1

set relativenumber "give relativenumber a try

" Sublime like indentation
vmap <leader>[ <gv
vmap <leader>] >gv
nmap <leader>[ <<
nmap <leader>] >>

" CTAGS
set tags=TAGS;

" Deoplete
let g:deoplete#enable_at_startup = 1
let g:deoplete#disable_auto_complete = 1

" Search for selected text, forwards or backwards.
vnoremap <silent> * :<C-U>
  \let old_reg=getreg('"')<Bar>let old_regtype=getregtype('"')<CR>
  \gvy/<C-R><C-R>=substitute(
  \escape(@", '/\.*$^~['), '\_s\+', '\\_s\\+', 'g')<CR><CR>
  \gV:call setreg('"', old_reg, old_regtype)<CR>
vnoremap <silent> # :<C-U>
  \let old_reg=getreg('"')<Bar>let old_regtype=getregtype('"')<CR>
  \gvy?<C-R><C-R>=substitute(
  \escape(@", '?\.*$^~['), '\_s\+', '\\_s\\+', 'g')<CR><CR>
  \gV:call setreg('"', old_reg, old_regtype)<CR>

" Fuzzy buffer searching with fzf
function! s:buflist()
  redir => ls
  silent ls
  redir END
  return split(ls, '\n')
endfunction

function! s:bufopen(e)
  execute 'buffer' matchstr(a:e, '^[ 0-9]*')
endfunction

nnoremap <silent> <Leader>g :call fzf#run({
  \   'source':  reverse(<sid>buflist()),
  \   'sink':    function('<sid>bufopen'),
  \   'options': '+m',
  \   'down':    len(<sid>buflist()) + 2
  \ })<CR>

" Neovim Python configuration
let g:python_host_prog='/usr/local/bin/python'
let g:python3_host_prog='/usr/local/bin/python3'

" Allow escape to exit in terminal
" Should be fine but will disable escape for
" other purposes in term
tnoremap <leader><Esc> <C-\><C-n>
